// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.5.0 <0.9.0;

contract CrossBorderPayment {
    address payable public owner;

    // Mapping to store user balances
    mapping(address => uint256) public balances;

    // Mapping to store KYC verification status
    mapping(address => bool) public kycVerified;

    event Deposit(address indexed _from, uint256 _value);
    event PaymentSent(address indexed sender, address indexed recipient, uint amount, string currency);
    event KYCVerified(address indexed user);

    constructor() {
        owner = payable(msg.sender);  // Fixed constructor assignment to properly set the owner
    }

    // Modifier to require KYC verification
    modifier isKYCVerified(address _user) {
        require(kycVerified[_user], "User is not KYC verified");
        _;
    }

    // Function for the owner to verify a user's KYC
    function verifyKYC(address _user) public {
        require(msg.sender == owner, "Only the owner can verify KYC");
        kycVerified[_user] = true;
        emit KYCVerified(_user);
    }

    // Function to deposit money into the contract
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than zero.");
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    // Function to send specified token to recipient, requires KYC verification
    function sendPayment(address payable _recipient, uint _amount, string memory currency) public payable isKYCVerified(msg.sender) {
        require(msg.value > 0 && msg.value >= _amount, "Amount sent must be greater than 0 and enough to cover the payment");
        require(address(this).balance >= _amount, "Insufficient balance in the contract");
        require(_recipient != address(0), "Invalid recipient address");

        _recipient.transfer(_amount);
        emit PaymentSent(msg.sender, _recipient, _amount, currency);
    }

    // Function to handle cross-border payments, requires KYC verification
    function processPayment(address payable receiver, uint amount, string memory currency) public isKYCVerified(msg.sender) {
        require(address(this).balance >= amount, "Insufficient funds");
        receiver.transfer(amount);
        emit PaymentSent(msg.sender, receiver, amount, currency);
    }

    // Withdraw function accessible only to the owner
    function withdraw(uint amount) public {
        require(msg.sender == owner, "Only the owner can withdraw.");
        require(address(this).balance >= amount, "Insufficient balance in the contract");
        owner.transfer(amount);
    }

    // Function to get the balance of
